{"version":3,"sources":["../../src/filters/Temperature.js"],"names":["Temperature","shaders","Shaders","create","temprature","frag","GLSL","factor","t","children","temp"],"mappings":";;;;;;;;kBA6CwBA,W;;AA7CxB;;AACA;;;;;;;;AAEA,IAAMC,UAAUC,iBAAQC,MAAR,CAAe;AAC7BC,cAAY;AACVC,cAAMC,aAAN;AADU;AADiB,CAAf,CAAhB;;AA0Ce,SAASN,WAAT,OAAqD;AAAA,yBAA9BO,MAA8B;AAAA,MAA9BA,MAA8B,+BAArB,IAAqB;AAAA,MAALC,CAAK,QAAfC,QAAe;;AAClE,SACE,8BAAC,aAAD;AACE,YAAQR,QAAQG,UADlB;AAEE,cAAU;AACRM,YAAMH,MADE;AAERC;AAFQ;AAFZ,IADF;AASD","file":"Temperature.js","sourcesContent":["import { Shaders, Node, GLSL } from \"gl-react\";\nimport React from \"react\";\n\nconst shaders = Shaders.create({\n  temprature: {\n    frag: GLSL`\n      precision highp float;\n      varying vec2 uv;\n      uniform sampler2D t;\n      uniform float temp;\n      uniform vec2 resolution;\n\n      const float LuminancePreservationFactor = 1.0;\n      const float PI2 = 6.2831853071;\n\n      vec3 colorTemperatureToRGB(const in float temperature){\n        mat3 m = (temperature <= 6500.0) ? mat3(vec3(0.0, -2902.1955373783176, -8257.7997278925690),\n        vec3(0.0, 1669.5803561666639, 2575.2827530017594),\n        vec3(1.0, 1.3302673723350029, 1.8993753891711275)) :\n        mat3(vec3(1745.0425298314172, 1216.6168361476490, -8257.7997278925690),\n        vec3(-2666.3474220535695, -2173.1012343082230, 2575.2827530017594),\n        vec3(0.55995389139931482, 0.70381203140554553, 1.8993753891711275));\n        return mix(\n          clamp(vec3(m[0] / (vec3(clamp(temperature, 1000.0, 40000.0)) + m[1]) + m[2]),\n          vec3(0.0), vec3(1.0)), vec3(1.0), smoothstep(1000.0, 0.0, temperature)\n        );\n      }\n\n      void main() {\n        float temperature = temp;\n        float temperatureStrength = 1.0;\n\n        vec3 inColor = texture2D(t, uv).xyz;\n        vec3 outColor = mix(inColor, inColor * colorTemperatureToRGB(temperature), temperatureStrength);\n        #ifdef WithQuickAndDirtyLuminancePreservation\n        outColor *= mix(1.0, dot(inColor, vec3(0.2126, 0.7152, 0.0722)) /\n          max(dot(outColor, vec3(0.2126, 0.7152, 0.0722)), 1e-5), LuminancePreservationFactor);\n        #endif\n\n        gl_FragColor = vec4(outColor, 1.0);\n      }\n    `\n  }\n});\n\nexport default function Temperature({ factor = 6500, children: t }) {\n  return (\n    <Node\n      shader={shaders.temprature}\n      uniforms={{\n        temp: factor,\n        t,\n      }}\n    />\n  )\n}\n"]}