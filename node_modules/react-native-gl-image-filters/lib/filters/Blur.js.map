{"version":3,"sources":["../../src/filters/Blur.js"],"names":["Blur","shaders","Shaders","create","blur","frag","GLSL","width","height","factor","children","passes","directionForPass","directionForPassDefault","rec","pass","direction","resolution","t"],"mappings":";;;;;;;;kBAgCwBA,I;;AAhCxB;;AACA;;;;AAEA;;;;;;;;AAEA,IAAMC,UAAUC,iBAAQC,MAAR,CAAe;AAC7BC,QAAM;AACJC,cAAMC,aAAN;AADI;AADuB,CAAf,CAAhB;;AA2Be,SAASN,IAAT,OAOZ;AAAA,MANDO,KAMC,QANDA,KAMC;AAAA,MALDC,MAKC,QALDA,MAKC;AAAA,yBAJDC,MAIC;AAAA,MAJDA,MAIC,+BAJQ,CAIR;AAAA,MAHDC,QAGC,QAHDA,QAGC;AAAA,yBAFDC,MAEC;AAAA,MAFDA,MAEC,+BAFQ,CAER;AAAA,mCADDC,gBACC;AAAA,MADDA,gBACC,yCADkBC,iCAClB;;AACD,MAAMC,MAAM,SAANA,GAAM;AAAA,WACVC,QAAQ,CAAR,GACEL,QADF,GAGE,8BAAC,aAAD;AACE,cAAQT,QAAQG,IADlB;AAEE,aAAOG,KAFT;AAGE,cAAQC,MAHV;AAIE,gBAAU;AACRQ,mBAAWJ,iBAAiBG,IAAjB,EAAuBN,MAAvB,EAA+BE,MAA/B,CADH;AAERM,oBAAY,CAACV,KAAD,EAAQC,MAAR,CAFJ;AAGRU,WAAGJ,IAAIC,OAAO,CAAX;AAHK;AAJZ,MAJQ;AAAA,GAAZ;;AAgBA,SAAOD,IAAIH,MAAJ,CAAP;AACD","file":"Blur.js","sourcesContent":["import { Shaders, Node, GLSL } from \"gl-react\";\nimport React from \"react\";\n\nimport directionForPassDefault from \"../utils/directionForPassDefault\";\n\nconst shaders = Shaders.create({\n  blur: {\n    frag: GLSL`\n      precision highp float;\n      varying vec2 uv;\n      uniform sampler2D t;\n      uniform vec2 direction, resolution;\n\n      vec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.3846153846) * direction;\n        vec2 off2 = vec2(3.2307692308) * direction;\n        color += texture2D(image, uv) * 0.2270270270;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\n        color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\n        return color;\n      }\n\n      void main () {\n        gl_FragColor = blur9(t, uv, resolution, direction);\n      }\n    `\n  }\n});\n\nexport default function Blur({ \n  width,\n  height,\n  factor = 0,\n  children,\n  passes = 2,\n  directionForPass = directionForPassDefault\n}) {\n  const rec = pass =>\n    pass <= 0 ? (\n      children\n    ) : (\n      <Node\n        shader={shaders.blur}\n        width={width}\n        height={height}\n        uniforms={{\n          direction: directionForPass(pass, factor, passes),\n          resolution: [width, height],\n          t: rec(pass - 1)\n        }}\n      />\n    );\n\n  return rec(passes);\n}\n"]}